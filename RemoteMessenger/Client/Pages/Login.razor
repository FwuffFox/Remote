@page "/login";
@layout Shared.Layouts.EmptyLayout;
@inject ILogger<Login> Logger;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IJSRuntime Js
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
<PageTitle>Login</PageTitle>

<div style="max-width: 20rem; margin-left: auto; margin-right: auto; padding: 15px;">	
			
	<div id="background" />
	
	<img src="Icon.png" width="100%">
	
	<EditForm Model="@_loginValidationModel" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@HandleValidSubmit">
		<DataAnnotationsValidator />
		<div class="text-field text-field_floating">
			<input tabindex="1" class="text-field__input" type="text" id="username" placeholder=" "
			       @bind-value="@_loginValidationModel.Username" />
			<label class="text-field__label" for="username">Тег Пользователя</label>
			<ValidationMessage For="@(() => _loginValidationModel.Username)" />
		</div>
		<div class="text-field text-field_floating">
			<input tabindex="2" class="text-field__input" type="password" id="password" name="password" placeholder=" "
			       @bind-value="@_loginValidationModel.Password" />
			<label class="text-field__label" for="password">Пароль</label>
			<ValidationMessage For="@(() => _loginValidationModel.Password)" />
		</div>
		<div class="link_button center_vertical">
			<button tabindex="3" class="img_buttons" type="submit">
				<div id="buttons">
					<div class="text_buttons">Войти</div>
				</div>
			</button>
		</div>
		@if (isError) {<span style="color: red">@_loginErrorMessage</span>}
	</EditForm>
	
	

<button @onclick="LogUsername">Log username</button>

<p>@authMessage</p>


</div>

@code {
	private class LoginValidationModel : LoginUserDto {}
	private readonly LoginValidationModel _loginValidationModel = new();
	private string _loginErrorMessage;
	private bool isError;
	
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	private void HandleInvalidSubmit()
	{
		Logger.LogDebug("Handled invalid submit");
	}

	private async Task HandleValidSubmit()
	{
		var result = await HttpClient.PostAsJsonAsync("api/login", _loginValidationModel);
		if (!result.IsSuccessStatusCode)
		{
			_loginErrorMessage = await result.Content.ReadAsStringAsync();
			isError = true;
			return;
		}
		var token = await result.Content.ReadAsStringAsync();
		await Js.InvokeAsync<object>("console.log", token);
		
	}

	private string authMessage;

	private async Task LogUsername()
	{
		var authState = await authenticationStateTask;
		var user = authState.User;
		if (user.Identity.IsAuthenticated)
		{
			authMessage = $"{user.FindFirst(claim => claim.Type == "name")} is authenticated.";
		}
		else
		{
			authMessage = "The user is NOT authenticated.";
		}
	}

	protected override async void OnInitialized()
	{
		var authState = await authenticationStateTask;
		var user = authState.User;
		if (user.Identity.IsAuthenticated)
		{
			NavigationManager.NavigateTo("/");
		}
	}
}