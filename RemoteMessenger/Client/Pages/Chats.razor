@page "/chats"
@using RemoteMessenger.Shared.Models
@using RemoteMessenger.Client.Services
@attribute [Authorize]
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Chats</PageTitle>

<h1>В разработке!</h1>
@foreach (var chat in PrivateChats)
{
    var othername = chat.Sender.Username == _myUsername ? chat.Receiver.Username : chat.Sender.Username;
    <Contact ImageSrc="Icon.png" Name="@othername"></Contact>
}

@code {

    public List<PrivateChat> PrivateChats = new();
    private string _myUsername;
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
    /*
        var authState = await authenticationStateTask;
        var messengerAuthState = (MessengerAuthStateProvider)AuthenticationStateProvider;
        _myUsername = messengerAuthState.GetUniqueName(authState);
        PrivateChats = (await HttpClient.GetFromJsonAsync<List<PrivateChat>>($"/api/private_chats/getMyChats"))!;
        StateHasChanged(); */
        await base.OnInitializedAsync(); 
    }
}