@page "/chats/{username?}"
@attribute [Authorize]
@using RemoteMessenger.Client.Services
@using Microsoft.AspNetCore.SignalR.Client
@using RemoteMessenger.Shared.Models
@using System.Net
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject JwtManager JwtManager


<div class="vh-100">
    <div class="app">
        <div class="main-content">
            <div class="header">
                <h5 id="joinedRoom">Общий чат</h5>
            </div>
            <div id="messages-container" class="messages-container position-relative">
                @if (_messages.Any()) {<div class="no-messages-info"></div>}
                <ul class="list-unstyled">
                     @foreach (var item in _messages)
                     {
                         <li>
                             <div class="message-item @item.CSS">
                                 <img class="avatar avatar-lg mx-2" src="Icon.png" alt="@item.Username">
                                 <div class="message-content">
                                     <div class="message-info d-flex flex-wrap align-items-center">
                                         <span class="author">@item.Username</span>
                                         <span class="timestamp">@item.Date</span>
                                     </div>
                                     <div class="content">@item.Body</div>
                                 </div>
                             </div>
                         </li>
                         
                     }                
                </ul>
            </div>
            <form id="msg-input" class="message-input-container" @onsubmit="@(() => SendAsync(_newMessage))">
                 <input placeholder="Введите сообщение" @bind="@_newMessage" @onkeydown="@(() => SendAsync(_newMessage))">
                 <div class="actions d-flex align-items-center">
                     <button style="all: unset" id="btn-send-message" role="button" onclick="">
                         <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-send">
                             <line x1="22" y1="2" x2="11" y2="13"></line>
                             <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                         </svg>
                     </button>
                 </div>
            </form>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? Username { get; set; }

    private List<Message> _messages = new();
    
    private string _myUsername;
    
    private bool _isChatting;
    
    private HubConnection _hubConnection;

    private string _hubEndpoint = "private_chat";
    
    private string? _newMessage;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private async Task StartChatting()
    {
        try
        {
            _isChatting = true;
            await Task.Delay(1);
            StateHasChanged();

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(HttpClient.BaseAddress + _hubEndpoint, opt =>
                {
                    opt.AccessTokenProvider = JwtManager.LoadJwt;
                })
                .Build();

            _hubConnection.On<string, string>("SendMessage", ReceiveMessage);

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            //_message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void ReceiveMessage(string name, string message)
    {
        bool isMine = name.Equals(_myUsername, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine, DateTime.Now));
        
        StateHasChanged();
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            //await Js.InvokeAsync<string>("console.log", "ShouldSend");
            await _hubConnection.SendAsync("SendMessage", Username, message);

            _newMessage = string.Empty;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var messengerAuthState = (MessengerAuthStateProvider)AuthenticationStateProvider;
        _myUsername = messengerAuthState.GetUniqueName(authState);
        var response = await HttpClient.GetAsync(($"/api/private_chats/{Username}"));
        if (response.IsSuccessStatusCode)
        {
            var messages = await response.Content.ReadFromJsonAsync<List<PrivateMessage>>();
            if (messages is not null)
            {
                foreach (var message in messages)
                {
                    var sender = message.Sender;
                    var isMine = sender.Username == _myUsername;
                    _messages.Add(new Message(message.Sender.Username, message.Body, isMine, message.SendTime));
                }
            }
        }
        else
        {
            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                NavigationManager.NavigateTo("/chats");
                return;
            }
            if (response.StatusCode == HttpStatusCode.NotFound)
            {
                // TODO: Create new dms'
            }
        }
        await StartChatting();
        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private class Message
    {
        public Message(string username, string body, bool mine, DateTime date)
        {
            Username = username;
            Body = body;
            Mine = mine;
            Date = date;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public DateTime Date { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "isMine" : "";
    }
}