@page "/chatroom"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client
@using RemoteMessenger.Client.Services
@using RemoteMessenger.Shared.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject JwtManager JwtManager
@inject HttpClient HttpClient
@inject IJSRuntime Js

<PageTitle>General Chat</PageTitle>


@if (_isChatting)
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
    </div>

    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage" @onkeydown="@(() => SendAsync(_newMessage))"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}
else
{
    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}

@code {
    // flag to indicate chat status
    private bool _isChatting;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string? _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private readonly List<Message> _messages = new();

    private readonly string _hubEndpoint = "general_chat";
    
    private HubConnection _hubConnection;
    
    private IJSObjectReference? _module;
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import", 
                "./Pages/GeneralChat.razor.js");
        }
    }

    public async Task Chat()
    {
        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);
            StateHasChanged();

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(HttpClient.BaseAddress + _hubEndpoint, opt =>
                {
                    opt.AccessTokenProvider = JwtManager.LoadJwt;
                })
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private async void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));
        
        StateHasChanged();
        await _module!.InvokeVoidAsync("scrollToEnd");
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await Js.InvokeAsync<string>("console.log", "ShouldSend");
            await _hubConnection.SendAsync("Broadcast", _username, message);

            _newMessage = string.Empty;
        }
        await _module!.InvokeVoidAsync("scrollToEnd");
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }

    protected override async void OnInitialized()
    {
        var authState = await authenticationStateTask;
        var messengerAuthState = (MessengerAuthStateProvider)AuthenticationStateProvider;
        _username = messengerAuthState.GetUniqueName(authState);
        var messages = await HttpClient.GetFromJsonAsync<List<PublicMessage>>($"/messages/general/100");
        if (messages is not null)
        {
            foreach (var message in messages)
            {
                var isMine = message.Sender.Username == _username;
                _messages.Add(new Message(message.Sender.Username, message.Body, isMine));
            }
        }
        await Js.InvokeAsync<string>("console.log", _username);
        await Chat();
        await _module!.InvokeVoidAsync("scrollToEnd");
        await base.OnInitializedAsync();
    }
}