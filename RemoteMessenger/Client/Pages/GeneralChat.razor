@page "/chatroom"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client
@using RemoteMessenger.Client.Services
@using RemoteMessenger.Shared.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject JwtManager JwtManager
@inject HttpClient HttpClient
@inject IJSRuntime Js

<PageTitle>General Chat</PageTitle>

<div class="vh-100">
    <div class="app">
        <div class="main-content">
            <div class="header">
                <h5 id="joinedRoom">Общий чат</h5>
            </div>
            <div id="message-container" class="messages-container position-relative">
                @if (_messages.Any()) {<div class="no-messages-info"></div>}
                <ul class="list-unstyled">
                     @foreach (var item in _messages)
                     {
                         <li>
                             <div class="message-item @item.CSS">
                                 <img class="avatar avatar-lg mx-2" src="Icon.png" alt="@item.Username">
                                 <div class="message-content">
                                     <div class="message-info d-flex flex-wrap align-items-center">
                                         <span class="author">@item.Username</span>
                                         <span class="timestamp">@item.Date</span>
                                     </div>
                                     <div class="content">@item.Body</div>
                                 </div>
                             </div>
                         </li>
                         
                     }                
                </ul>
            </div>
            <form id="msg-input" class="message-input-container" @onsubmit="@(() => SendAsync(_newMessage))">
                 <input placeholder="Введите сообщение" @bind="@_newMessage" @onkeydown="@(() => SendAsync(_newMessage))">
                 <div class="actions d-flex align-items-center">
                     <a id="btn-send-message" href="javascript: document.getElementById('msg-input').submit();" role="button" onclick="">
                         <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-send">
                             <line x1="22" y1="2" x2="11" y2="13"></line>
                             <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                         </svg>
                     </a>
                 </div>
            </form>
        </div>
    </div>
</div>

@code {
    // flag to indicate chat status
    private bool _isChatting;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string? _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private readonly List<Message> _messages = new();

    private readonly string _hubEndpoint = "general_chat";
    
    private HubConnection _hubConnection;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public async Task Chat()
    {
        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);
            StateHasChanged();

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(HttpClient.BaseAddress + _hubEndpoint, opt =>
                {
                    opt.AccessTokenProvider = JwtManager.LoadJwt;
                })
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private async void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine, DateTime.Now));
        
        StateHasChanged();
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await Js.InvokeAsync<string>("console.log", "ShouldSend");
            await _hubConnection.SendAsync("Broadcast", _username, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine, DateTime date)
        {
            Username = username;
            Body = body;
            Mine = mine;
            Date = date;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public DateTime Date { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "isMine" : "";
    }

    protected override async void OnInitialized()
    {
        var authState = await authenticationStateTask;
        var messengerAuthState = (MessengerAuthStateProvider)AuthenticationStateProvider;
        _username = messengerAuthState.GetUniqueName(authState);
        await Js.InvokeAsync<string>("console.log", _username);
        var messages = await HttpClient.GetFromJsonAsync<List<PublicMessage>>($"/messages/general/100");
        await Js.InvokeAsync<Message[]>("console.log", messages);
        if (messages is not null)
        {
            foreach (var message in messages)
            {
                var sender = message.Sender;
                var isMine = sender.Username == _username;
                _messages.Add(new Message(message.Sender.Username, message.Body, isMine, message.SendTime));
            }
        }
        await Chat();
        await base.OnInitializedAsync();
    }
}